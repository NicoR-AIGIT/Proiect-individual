import os
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
import mlflow
import mlflow.sklearn
from sklearn.naive_bayes import MultinomialNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_reportmlflow
import joblib


df = pd.read_csv("emails.csv")

X_train_raw, X_test_raw, y_train, y_test = train_test_split(df['email'], df['categorie'], test_size=0.2, random_state=42)

tfidf = TfidfVectorizer()
X_train = tfidf.fit_transform(X_train_raw)
X_test = tfidf.transform(X_test_raw)

os.makedirs("../models", exist_ok=True)
joblib.dump(tfidf, "../models/tfidf_vectorizer.pkl")

models = {
    "NaiveBayes": MultinomialNB(),
    "RandomForest": RandomForestClassifier(n_estimators=100),
    "LogisticRegression": LogisticRegression(max_iter=200)
}

mlflow.set_experiment("email_classification_experiment")

for model_name, model in models.items():
    with mlflow.start_run(run_name=model_name):
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        acc = accuracy_score(y_test, y_pred)
        report = classification_report(y_test, y_pred, output_dict=True)

        mlflow.log_param("model_name", model_name)
        mlflow.log_metric("accuracy", acc)

        for label, metrics in report.items():
            if isinstance(metrics, dict):
                for metric_name, value in metrics.items():
                    mlflow.log_metric(f"{label}_{metric_name}", value)

        model_path = f"../models/{model_name}.pkl"
        joblib.dump(model, model_path)
        mlflow.sklearn.log_model(model, artifact_path=model_name)

        print(f"Model '{model_name}' antrenat si salvat. Acc: {acc:.4f}")
